using System.ComponentModel;
using Firebase.Auth;
using Firebase.Database;
using Firebase.Database.Query;
using Firebase.Storage;
using PetFinderMAUI.Entities;
using PetFinderMAUI.Utils;

namespace PetFinderMAUI.ViewModels;

public class NewPostViewModel : INotifyPropertyChanged
{
    private static readonly FirebaseClient _firebaseClient =
        new(Configs.FirebaseDbUrl);

    private string _petDescription;
    private string _petImageUrl;
    private string _petName;

    private ImageSource _selectedImageSource;

    // select image of pet
    public ImageSource SelectedImageSource
    {
        get => _selectedImageSource;
        set
        {
            _selectedImageSource = value;
            RaisePropertyChanged("SelectedImageSource");
        }
    }

    public string PetName
    {
        get => _petName;
        set
        {
            _petName = value;
            RaisePropertyChanged("PetName");
        }
    }

    public string PetDescription
    {
        get => _petDescription;
        set
        {
            _petDescription = value;
            RaisePropertyChanged("PetDescription");
        }
    }

    public string PetImageUrl
    {
        get => _petImageUrl;
        set
        {
            _petImageUrl = value;
            RaisePropertyChanged("PetImageUrl");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    private void RaisePropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public async Task PickAndUploadImage()
    {
        // Use MediaPicker to pick the image
        var result = await MediaPicker.PickPhotoAsync();
        var stream = await result!.OpenReadAsync();

        // Set the Image control's Source to the selected image
        SelectedImageSource = ImageSource.FromStream(() => stream);

        // Get the file extension
        var fileExtension = Path.GetExtension(result.FullPath).ToLower();

        // Check if the file extension is .png or .jpg
        if (fileExtension != ".png" && fileExtension != ".jpg")
        {
            // If the file is not a .png or .jpg, show an error message and return
            await Application.Current!.MainPage!.DisplayAlert("Error", "Please select a .png or .jpg image", "OK");
            return;
        }

        // Generate a unique name for the image using a GUID
        var imageName = Guid.NewGuid().ToString();

        // Use FirebaseStorage.net to upload the image
        var storageImage = await new FirebaseStorage(Configs.FirebaseStorageUrl)
            .Child("petsImages")
            .Child($"{imageName}{fileExtension}")
            .PutAsync(stream);

        // Get the image URL
        PetImageUrl = storageImage;
    }

    public async Task PostPet()
    {
        var userId = Preferences.Get("userId", string.Empty);
        // Create a new Pet object
        var pet = new Pet
        {
            PetName = PetName,
            PetDescription = PetDescription,
            PetImage = PetImageUrl,
            PublisherId = userId
        };

        // Post the pet to Firebase and get the generated key
        var result = await _firebaseClient
            .Child("Pets")
            .PostAsync(pet);

        // Set the PetId to the key generated by Firebase
        pet.PetId = result.Key;

        // Update the pet in Firebase with the new PetId
        await _firebaseClient
            .Child("Pets")
            .Child(pet.PetId)
            .PutAsync(pet);
    }
}